{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useCallback, useLayoutEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport MapView, { Marker } from 'react-native-maps';\nimport { Navigation } from \"@react-navigation/native\";\nimport IconButton from \"../Components/UI/IconButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction Map(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n  var initialLocation = route.params && {\n    lat: route.params.initialLat,\n    lng: route.params.initialLng\n  };\n\n  var _useState = useState(initialLocation),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedLocation = _useState2[0],\n      setSelectedLocation = _useState2[1];\n\n  var region = {\n    latitude: initialLocation ? initialLocation.lat : 41.3874,\n    longitude: initialLocation ? initialLocation.lng : 2.1686,\n    latitudeDelta: 0.1022,\n    longitudeDelta: 0.1021\n  };\n\n  function selectLocationHandler(event) {\n    if (initialLocation) {\n      return;\n    }\n\n    var lat = event.nativeEvent.coordinate.latitude;\n    var lng = event.nativeEvent.coordinate.longitude;\n    setSelectedLocation({\n      lat: lat,\n      lng: lng\n    });\n  }\n\n  var savePickedLocationHandler = useCallback(function () {\n    if (!selectedLocation) {\n      Alert.alert(\"No location picked\", \"Tap on the map to pick location\");\n      return;\n    }\n\n    navigation.navigate(\"AddPlace\", {\n      pickedLat: selectedLocation.lat,\n      pickedLng: selectedLocation.lng\n    });\n  }, [navigation, selectedLocation]);\n  useLayoutEffect(function () {\n    if (initialLocation) {\n      return;\n    }\n\n    navigation.setOptions({\n      headerRight: function headerRight(_ref2) {\n        var tintColor = _ref2.tintColor;\n        return _jsx(IconButton, {\n          icon: \"add\",\n          size: 24,\n          color: tintColor,\n          onPress: savePickedLocationHandler\n        });\n      }\n    });\n  }, [navigation, savePickedLocationHandler, initialLocation]);\n  return _jsx(Pressable, {\n    style: styles.map,\n    children: _jsx(MapView, {\n      initialRegion: region,\n      style: styles.map,\n      onPress: selectLocationHandler,\n      children: selectedLocation && _jsx(Marker, {\n        title: \"Picked Location\",\n        coordinate: {\n          latitude: selectedLocation.lat,\n          longitude: selectedLocation.lng\n        }\n      })\n    })\n  });\n}\n\nexport default Map;\nvar styles = StyleSheet.create({\n  map: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["C:/Users/jimpe/Desktop/react_native_apps/BarcelonaApp/Screens/Map.jsx"],"names":["useState","useCallback","useLayoutEffect","MapView","Marker","Navigation","IconButton","Map","navigation","route","initialLocation","params","lat","initialLat","lng","initialLng","selectedLocation","setSelectedLocation","region","latitude","longitude","latitudeDelta","longitudeDelta","selectLocationHandler","event","nativeEvent","coordinate","savePickedLocationHandler","Alert","alert","navigate","pickedLat","pickedLng","setOptions","headerRight","tintColor","styles","map","StyleSheet","create","flex"],"mappings":"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","sourcesContent":["import { useState, useCallback, useLayoutEffect } from \"react\"\r\nimport { StyleSheet, Pressable, Alert } from 'react-native'\r\nimport MapView, { Marker }  from 'react-native-maps';\r\nimport { Navigation } from \"@react-navigation/native\"\r\n\r\nimport IconButton from \"../Components/UI/IconButton\"\r\n\r\n\r\n\r\nfunction Map({navigation, route}) {\r\n  const initialLocation = route.params && {\r\n    lat: route.params.initialLat,\r\n    lng: route.params.initialLng,\r\n };\r\n\r\n\r\n  const [selectedLocation, setSelectedLocation] = useState(initialLocation)\r\n\r\n  const region = {\r\n    latitude: initialLocation ? initialLocation.lat : 41.3874,\r\n    longitude: initialLocation ? initialLocation.lng : 2.1686,\r\n    latitudeDelta: 0.1022,\r\n    longitudeDelta: 0.1021,\r\n  }\r\n\r\nfunction selectLocationHandler(event) {\r\n  if(initialLocation) {\r\n    return;\r\n  }\r\n\r\n  const lat = event.nativeEvent.coordinate.latitude\r\n  const lng = event.nativeEvent.coordinate.longitude\r\n\r\n  setSelectedLocation({ lat: lat, lng: lng })\r\n}\r\n\r\nconst savePickedLocationHandler = useCallback(() => {\r\n  if (!selectedLocation) {\r\n    Alert.alert(\"No location picked\", \"Tap on the map to pick location\");\r\n    return;\r\n  }\r\n\r\n  navigation.navigate(\"AddPlace\", { \r\n    pickedLat: selectedLocation.lat, \r\n    pickedLng: selectedLocation.lng,\r\n  })\r\n}, [navigation, selectedLocation])\r\n\r\nuseLayoutEffect(() => {\r\n  if (initialLocation) {\r\n    return;\r\n  }\r\n  navigation.setOptions({\r\n    headerRight: ({tintColor}) => <IconButton \r\n      icon=\"add\"\r\n      size={24}\r\n      color={tintColor}\r\n      onPress={savePickedLocationHandler}\r\n    />\r\n    \r\n  })\r\n}, [navigation, savePickedLocationHandler, initialLocation])\r\n\r\n  return (\r\n    <Pressable style={styles.map}>\r\n    <MapView \r\n      initialRegion={region} \r\n      style={styles.map}\r\n      onPress={selectLocationHandler}\r\n    >\r\n    {selectedLocation && (\r\n      <Marker \r\n        title=\"Picked Location\"\r\n        coordinate={{\r\n          latitude: selectedLocation.lat,\r\n          longitude: selectedLocation.lng,\r\n        }}\r\n      />\r\n    )}\r\n    </MapView>\r\n    </Pressable>\r\n  )\r\n}\r\n\r\nexport default Map\r\n\r\nconst styles = StyleSheet.create({\r\n  map: {\r\n    flex: 1\r\n  },\r\n})"]},"metadata":{},"sourceType":"module"}
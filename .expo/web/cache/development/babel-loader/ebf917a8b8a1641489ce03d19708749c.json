{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport * as SQLite from 'expo-sqlite';\nimport { Place } from \"../Models/place\";\nvar database = SQLite.openDatabase('places.db');\nexport function init() {\n  var promise = new Promise(function (resolve, reject) {\n    database.transaction(function (tx) {\n      tx.executeSql(\"CREATE TABLE IF NOT EXISTS places (\\n          id INTEGER PRIMARY KEY NOT NULL,\\n          title TEXT NOT NULL,\\n          imageUri TEXT NOT NULL,\\n          address TEXT NOT NULL,\\n          lat REAL NOT NULL,\\n          lng REAL NOT NULL\\n        )\", [], function () {\n        resolve();\n      }, function (_, error) {\n        reject(error);\n      });\n    });\n  });\n  return promise;\n}\nexport function insertPlace(place) {\n  var promise = new Promise(function (resolve, reject) {\n    database.transaction(function (tx) {\n      tx.executeSql(\"INSERT INTO places (title, imageUri, address, lat, lng) VALUES (?, ?, ?, ?, ?)\", [place.title, place.imageUri, place.address, place.location.lat, place.location.lng], function (_, result) {\n        resolve(result);\n      }, function (_, error) {\n        reject(error);\n      });\n    });\n  });\n  return promise;\n}\nexport function fetchPlaces() {\n  var promise = new Promise(function (resolve, reject) {\n    database.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM places', [], function (_, result) {\n        var places = [];\n\n        for (var _iterator = _createForOfIteratorHelperLoose(result.rows._array), _step; !(_step = _iterator()).done;) {\n          var dp = _step.value;\n          places.push(new Place(dp.title, dp.imageUri, {\n            address: dp.address,\n            lat: dp.lat,\n            lng: dp.lng\n          }, dp.id));\n        }\n\n        resolve(places);\n      }, function (_, error) {\n        reject(error);\n      });\n    });\n  });\n  return promise;\n}\nexport function fetchPlaceDetails(id) {\n  var promise = new Promise(function (resolve, reject) {\n    database.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM places WHERE id = ?', [id], function (_, result) {\n        var dbPlace = result.rows._array[0];\n        var place = new Place(dbPlace.title, dbPlace.imageUri, {\n          lat: dbPlace.lat,\n          lng: dbPlace.lng,\n          address: dbPlace.address\n        }, dbPlace.id);\n        resolve(result.rows._array[0]);\n      }, function (_, error) {\n        reject(error);\n      });\n    });\n  });\n  return promise;\n}","map":{"version":3,"sources":["C:/Users/jimpe/Desktop/react_native_apps/BarcelonaApp/util/database.js"],"names":["SQLite","Place","database","openDatabase","init","promise","Promise","resolve","reject","transaction","tx","executeSql","_","error","insertPlace","place","title","imageUri","address","location","lat","lng","result","fetchPlaces","places","rows","_array","dp","push","id","fetchPlaceDetails","dbPlace"],"mappings":"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","sourcesContent":["import * as SQLite from 'expo-sqlite';\r\n\r\nimport { Place } from '../Models/place';\r\n\r\nconst database = SQLite.openDatabase('places.db');\r\n\r\nexport function init() {\r\n  const promise = new Promise((resolve, reject) => {\r\n    database.transaction((tx) => {\r\n      tx.executeSql(\r\n        `CREATE TABLE IF NOT EXISTS places (\r\n          id INTEGER PRIMARY KEY NOT NULL,\r\n          title TEXT NOT NULL,\r\n          imageUri TEXT NOT NULL,\r\n          address TEXT NOT NULL,\r\n          lat REAL NOT NULL,\r\n          lng REAL NOT NULL\r\n        )`,\r\n        [],\r\n        () => {\r\n          resolve();\r\n        },\r\n        (_, error) => {\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  });\r\n\r\n  return promise;\r\n}\r\n\r\nexport function insertPlace(place) {\r\n  const promise = new Promise((resolve, reject) => {\r\n    database.transaction((tx) => {\r\n      tx.executeSql(\r\n        `INSERT INTO places (title, imageUri, address, lat, lng) VALUES (?, ?, ?, ?, ?)`,\r\n        [\r\n          place.title,\r\n          place.imageUri,\r\n          place.address,\r\n          place.location.lat,\r\n          place.location.lng,\r\n        ],\r\n        (_, result) => {\r\n          resolve(result);\r\n        },\r\n        (_, error) => {\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  });\r\n\r\n  return promise;\r\n}\r\n\r\nexport function fetchPlaces() {\r\n  const promise = new Promise((resolve, reject) => {\r\n    database.transaction((tx) => {\r\n      tx.executeSql(\r\n        'SELECT * FROM places',\r\n        [],\r\n        (_, result) => {\r\n          const places = [];\r\n\r\n          for (const dp of result.rows._array) {\r\n            places.push(\r\n              new Place(\r\n                dp.title,\r\n                dp.imageUri,\r\n                {\r\n                  address: dp.address,\r\n                  lat: dp.lat,\r\n                  lng: dp.lng,\r\n                },\r\n                dp.id\r\n              )\r\n            );\r\n          }\r\n          resolve(places);\r\n        },\r\n        (_, error) => {\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  });\r\n\r\n  return promise;\r\n}\r\n\r\nexport function fetchPlaceDetails(id) {\r\n  const promise = new Promise((resolve, reject) => {\r\n    database.transaction((tx) => {\r\n      tx.executeSql(\r\n        'SELECT * FROM places WHERE id = ?',\r\n        [id],\r\n        (_, result) => {\r\n          const dbPlace = result.rows._array[0]\r\n          const place = new Place(dbPlace.title, dbPlace.imageUri, \r\n            { lat: dbPlace.lat, lng: dbPlace.lng, address: dbPlace.address },\r\n            dbPlace.id);\r\n          resolve(result.rows._array[0]);\r\n        },\r\n        (_, error) => {\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  });\r\n\r\n  return promise;\r\n}"]},"metadata":{},"sourceType":"module"}
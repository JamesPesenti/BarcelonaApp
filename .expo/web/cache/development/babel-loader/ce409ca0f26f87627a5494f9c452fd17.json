{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState } from \"react\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { launchCameraAsync, useCameraPermissions, PermissionStatus } from \"expo-image-picker\";\nimport OutlinedButton from \"../UI/OutlinedButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ImagePicker(_ref) {\n  var onTakeImage = _ref.onTakeImage;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      pickedImage = _useState2[0],\n      setPickedImage = _useState2[1];\n\n  var _useCameraPermissions = useCameraPermissions(),\n      _useCameraPermissions2 = _slicedToArray(_useCameraPermissions, 2),\n      cameraPermissionInformation = _useCameraPermissions2[0],\n      requestPermission = _useCameraPermissions2[1];\n\n  function verifyPermissions() {\n    var permissionResponse;\n    return _regeneratorRuntime.async(function verifyPermissions$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(cameraPermissionInformation.status === PermissionStatus.UNDETERMINED)) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(requestPermission());\n\n          case 3:\n            permissionResponse = _context.sent;\n            return _context.abrupt(\"return\", permissionResponse.granted);\n\n          case 5:\n            if (!(cameraPermissionInformation.status === PermissionStatus.DENIED)) {\n              _context.next = 8;\n              break;\n            }\n\n            Alert.alert(\"Access Denied\", \"Grant camera permissions\");\n            return _context.abrupt(\"return\", false);\n\n          case 8:\n            return _context.abrupt(\"return\", true);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function takeImageHandler() {\n    var hasPermission, image;\n    return _regeneratorRuntime.async(function takeImageHandler$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(verifyPermissions());\n\n          case 2:\n            hasPermission = _context2.sent;\n\n            if (hasPermission) {\n              _context2.next = 5;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 5:\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(launchCameraAsync({\n              allowsEditing: true,\n              aspect: [16, 9],\n              quality: 0.5\n            }));\n\n          case 7:\n            image = _context2.sent;\n            setPickedImage(image.uri);\n            onTakeImage(image.uri);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var imagePreview = _jsx(Text, {\n    children: \"No image taken yet\"\n  });\n\n  if (pickedImage) {\n    imagePreview = _jsx(Image, {\n      style: styles.image,\n      source: {\n        uri: pickedImage\n      }\n    });\n  }\n\n  return _jsxs(View, {\n    children: [_jsx(View, {\n      style: styles.imagePreview,\n      children: imagePreview\n    }), _jsx(OutlinedButton, {\n      icon: \"camera\",\n      onPress: takeImageHandler,\n      children: \"Add a Picture\"\n    })]\n  });\n}\n\nexport default ImagePicker;\nvar styles = StyleSheet.create({\n  imagePreview: {\n    width: \"90%\",\n    height: 200,\n    marginVertical: 38,\n    marginHorizontal: 18,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"white\",\n    borderRadius: 30,\n    elevation: 3.3\n  },\n  image: {\n    width: \"100%\",\n    height: \"100%\",\n    borderRadius: 10\n  }\n});","map":{"version":3,"sources":["C:/Users/jimpe/Desktop/react_native_apps/BarcelonaApp/Components/Places/ImagePicker.jsx"],"names":["useState","launchCameraAsync","useCameraPermissions","PermissionStatus","OutlinedButton","ImagePicker","onTakeImage","pickedImage","setPickedImage","cameraPermissionInformation","requestPermission","verifyPermissions","status","UNDETERMINED","permissionResponse","granted","DENIED","Alert","alert","takeImageHandler","hasPermission","allowsEditing","aspect","quality","image","uri","imagePreview","styles","StyleSheet","create","width","height","marginVertical","marginHorizontal","justifyContent","alignItems","backgroundColor","borderRadius","elevation"],"mappings":"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","sourcesContent":["import { useState } from \"react\"\r\nimport { Alert, Image, View, Text, Button, StyleSheet} from 'react-native'\r\nimport { launchCameraAsync, useCameraPermissions, PermissionStatus } from \"expo-image-picker\"\r\nimport OutlinedButton from \"../UI/OutlinedButton\"\r\n\r\n\r\n\r\n\r\nfunction ImagePicker({ onTakeImage }) {\r\n  const [pickedImage, setPickedImage] = useState()\r\n\r\n  const [cameraPermissionInformation, requestPermission] = useCameraPermissions()\r\n\r\n\r\n  async function verifyPermissions() {\r\n      if (cameraPermissionInformation.status === PermissionStatus.UNDETERMINED) {\r\n         const permissionResponse = await requestPermission()  \r\n\r\n         return permissionResponse.granted \r\n      }\r\n\r\n      if (cameraPermissionInformation.status === PermissionStatus.DENIED) {\r\n          Alert.alert(\"Access Denied\", \"Grant camera permissions\")\r\n          return false\r\n      }\r\n      return true\r\n  } \r\n\r\n  async function takeImageHandler() {\r\n      const hasPermission = await verifyPermissions()\r\n\r\n      if (!hasPermission) {\r\n          return;\r\n      }\r\n\r\n      const image = await launchCameraAsync({\r\n          allowsEditing: true,\r\n          aspect: [16, 9],\r\n          quality: 0.5,\r\n      })\r\n      setPickedImage(image.uri)\r\n      onTakeImage(image.uri)\r\n    }\r\n\r\n    let imagePreview = <Text>No image taken yet</Text>\r\n\r\n    if (pickedImage) {\r\n        imagePreview =  <Image style={styles.image} source={{ uri: pickedImage }} />;\r\n    }\r\n\r\n  return (\r\n    <View>\r\n        <View style={styles.imagePreview}>{imagePreview}</View>\r\n        {/* <Button title=\"Take Image\" onPress={takeImageHandler} /> */}\r\n        <OutlinedButton icon=\"camera\" onPress={takeImageHandler}>Add a Picture</OutlinedButton>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default ImagePicker\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    imagePreview: {\r\n        width: \"90%\",\r\n        height: 200,\r\n        marginVertical: 38,\r\n        marginHorizontal: 18,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        backgroundColor: \"white\",\r\n        borderRadius: 30,\r\n        elevation: 3.3\r\n    },\r\n    image: {\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        borderRadius: 10\r\n    },\r\n\r\n\r\n})"]},"metadata":{},"sourceType":"module"}
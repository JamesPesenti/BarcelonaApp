{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useEffect, useState } from 'react';\nimport OutlinedButton from \"../Components/UI/OutlinedButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction PlaceDetails(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      fetched = _useState2[0],\n      setFetchedPlace = _useState2[1];\n\n  function showOnMapHandler() {\n    navigation.navigate(\"Map\", {\n      initialLat: fetchedPlace.location.lat,\n      initilaLng: fetchedPlace.location.lng\n    });\n  }\n\n  var selectedPlaceId = route.params.placeId;\n  useEffect(function () {\n    function loadPlaceData() {\n      var place;\n      return _regeneratorRuntime.async(function loadPlaceData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetchPlaceDetails(selectedPlaceId));\n\n            case 2:\n              place = _context.sent;\n              setFetchedPlace(place);\n              navigation.setOptions({\n                title: place.title\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    loadPlaceData();\n  }, [selectedPlaceId]);\n\n  if (!fetchedPlace) {\n    return _jsx(View, {\n      style: styles.fallback,\n      children: _jsx(Text, {\n        children: \"Loading place data..\"\n      })\n    });\n  }\n\n  return _jsxs(ScrollView, {\n    children: [_jsx(Image, {\n      style: styles.image,\n      source: {\n        uri: fetchedPlace.imageUri\n      }\n    }), _jsxs(View, {\n      style: styles.locationContainer,\n      children: [_jsx(View, {\n        style: styles.addressContainer,\n        children: _jsx(Text, {\n          style: styles.address,\n          children: fetchedPlace.address\n        })\n      }), _jsx(OutlinedButton, {\n        icon: \"map\",\n        onPress: showOnMapHandler,\n        children: \"View on map\"\n      })]\n    })]\n  });\n}\n\nexport default PlaceDetails;\nvar styles = StyleSheet.create({\n  fallback: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  image: {\n    height: \"35%\",\n    minHeight: 300,\n    width: \"100%\"\n  },\n  locationContainer: {\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  addressContainer: {\n    padding: 20\n  },\n  address: {\n    color: \"red\",\n    textAlign: \"center\",\n    fontWeight: \"bold\",\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["C:/Users/jimpe/Desktop/react_native_apps/BarcelonaApp/Screens/PlaceDetails.jsx"],"names":["useEffect","useState","OutlinedButton","PlaceDetails","route","navigation","fetched","setFetchedPlace","showOnMapHandler","navigate","initialLat","fetchedPlace","location","lat","initilaLng","lng","selectedPlaceId","params","placeId","loadPlaceData","fetchPlaceDetails","place","setOptions","title","styles","fallback","image","uri","imageUri","locationContainer","addressContainer","address","StyleSheet","create","flex","justifyContent","alignItems","height","minHeight","width","padding","color","textAlign","fontWeight","fontSize"],"mappings":";;;;;;;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,cAAP;;;;AAEA,SAASC,YAAT,OAA2C;AAAA,MAApBC,KAAoB,QAApBA,KAAoB;AAAA,MAAbC,UAAa,QAAbA,UAAa;;AACzC,kBAAoCJ,QAAQ,EAA5C;AAAA;AAAA,MAAOK,OAAP;AAAA,MAAiBC,eAAjB;;AAEA,WAASC,gBAAT,GAA4B;AAC1BH,IAAAA,UAAU,CAACI,QAAX,CAAoB,KAApB,EAA2B;AACzBC,MAAAA,UAAU,EAAEC,YAAY,CAACC,QAAb,CAAsBC,GADT;AAEzBC,MAAAA,UAAU,EAAEH,YAAY,CAACC,QAAb,CAAsBG;AAFT,KAA3B;AAID;;AAED,MAAMC,eAAe,GAAGZ,KAAK,CAACa,MAAN,CAAaC,OAArC;AAGAlB,EAAAA,SAAS,CAAC,YAAM;AACd,aAAemB,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACsBC,iBAAiB,CAACJ,eAAD,CADvC;;AAAA;AACQK,cAAAA,KADR;AAEEd,cAAAA,eAAe,CAACc,KAAD,CAAf;AACAhB,cAAAA,UAAU,CAACiB,UAAX,CAAsB;AACpBC,gBAAAA,KAAK,EAAEF,KAAK,CAACE;AADO,eAAtB;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASAJ,IAAAA,aAAa;AACd,GAXQ,EAWN,CAACH,eAAD,CAXM,CAAT;;AAaA,MAAI,CAACL,YAAL,EAAmB;AACjB,WACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEa,MAAM,CAACC,QAApB;AAAA,gBACE,KAAC,IAAD;AAAA;AAAA;AADF,MADF;AAKD;;AAED,SACE,MAAC,UAAD;AAAA,eACE,KAAC,KAAD;AAAO,MAAA,KAAK,EAAED,MAAM,CAACE,KAArB;AAA4B,MAAA,MAAM,EAAE;AAACC,QAAAA,GAAG,EAAEhB,YAAY,CAACiB;AAAnB;AAApC,MADF,EAEE,MAAC,IAAD;AAAM,MAAA,KAAK,EAAEJ,MAAM,CAACK,iBAApB;AAAA,iBACI,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEL,MAAM,CAACM,gBAApB;AAAA,kBACE,KAAC,IAAD;AAAM,UAAA,KAAK,EAAEN,MAAM,CAACO,OAApB;AAAA,oBAA8BpB,YAAY,CAACoB;AAA3C;AADF,QADJ,EAII,KAAC,cAAD;AAAgB,QAAA,IAAI,EAAC,KAArB;AAA2B,QAAA,OAAO,EAAEvB,gBAApC;AAAA;AAAA,QAJJ;AAAA,MAFF;AAAA,IADF;AAWD;;AAED,eAAeL,YAAf;AAEA,IAAMqB,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC/BR,EAAAA,QAAQ,EAAE;AACRS,IAAAA,IAAI,EAAE,CADE;AAERC,IAAAA,cAAc,EAAE,QAFR;AAGRC,IAAAA,UAAU,EAAE;AAHJ,GADqB;AAM/BV,EAAAA,KAAK,EAAE;AACLW,IAAAA,MAAM,EAAE,KADH;AAELC,IAAAA,SAAS,EAAE,GAFN;AAGLC,IAAAA,KAAK,EAAE;AAHF,GANwB;AAW/BV,EAAAA,iBAAiB,EAAE;AACjBM,IAAAA,cAAc,EAAE,QADC;AAEjBC,IAAAA,UAAU,EAAE;AAFK,GAXY;AAe/BN,EAAAA,gBAAgB,EAAE;AAChBU,IAAAA,OAAO,EAAE;AADO,GAfa;AAkB/BT,EAAAA,OAAO,EAAE;AACPU,IAAAA,KAAK,EAAE,KADA;AAEPC,IAAAA,SAAS,EAAE,QAFJ;AAGPC,IAAAA,UAAU,EAAE,MAHL;AAIPC,IAAAA,QAAQ,EAAE;AAJH;AAlBsB,CAAlB,CAAf","sourcesContent":["import {ScrollView, StyleSheet, Image, Text, View} from 'react-native'\r\nimport { useEffect, useState } from 'react'\r\nimport OutlinedButton from \"../Components/UI/OutlinedButton\"\r\n\r\nfunction PlaceDetails({route, navigation}) {\r\n  const [fetched , setFetchedPlace] = useState()\r\n\r\n  function showOnMapHandler() {\r\n    navigation.navigate(\"Map\", {\r\n      initialLat: fetchedPlace.location.lat,\r\n      initilaLng: fetchedPlace.location.lng,\r\n    })\r\n  }\r\n\r\n  const selectedPlaceId = route.params.placeId;\r\n\r\n  // use selectedPlaceId to fetch data for a place\r\n  useEffect(() => {\r\n    async function loadPlaceData() {\r\n      const place = await fetchPlaceDetails(selectedPlaceId);\r\n      setFetchedPlace(place)\r\n      navigation.setOptions({\r\n        title: place.title,\r\n\r\n      });\r\n    }\r\n\r\n    loadPlaceData();\r\n  }, [selectedPlaceId])\r\n\r\n  if (!fetchedPlace) {\r\n    return (\r\n      <View style={styles.fallback}>\r\n        <Text>Loading place data..</Text>\r\n      </View>\r\n    )\r\n  }\r\n \r\n  return (\r\n    <ScrollView>\r\n      <Image style={styles.image} source={{uri: fetchedPlace.imageUri}} />\r\n      <View style={styles.locationContainer}>\r\n          <View style={styles.addressContainer}>\r\n            <Text style={styles.address}>{fetchedPlace.address}</Text>\r\n          </View>\r\n          <OutlinedButton icon=\"map\" onPress={showOnMapHandler}>View on map</OutlinedButton>\r\n      </View>\r\n    </ScrollView>\r\n  )\r\n}\r\n\r\nexport default PlaceDetails\r\n\r\nconst styles = StyleSheet.create({\r\n  fallback: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  image: {\r\n    height: \"35%\",\r\n    minHeight: 300,\r\n    width: \"100%\",\r\n  },\r\n  locationContainer: {\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  addressContainer: {\r\n    padding: 20,\r\n  },\r\n  address: {\r\n    color: \"red\",\r\n    textAlign: \"center\",\r\n    fontWeight: \"bold\",\r\n    fontSize: 16,\r\n  },\r\n})"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useEffect, useState } from \"react\";\nimport { useIsFocused } from \"@react-navigation/native\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PlacesList from \"../Components/Places/PlacesList\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction AllPlaces(_ref) {\n  var route = _ref.route;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      loadedPlaces = _useState2[0],\n      setLoadedPlaces = _useState2[1];\n\n  var isFocused = useIsFocused();\n  useEffect(function () {\n    function loadPlaces() {\n      var places;\n      return _regeneratorRuntime.async(function loadPlaces$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetchPlaces());\n\n            case 2:\n              places = _context.sent;\n              setLoadedPlaces(places);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    if (isFocused) {\n      loadPlaces();\n    }\n  }, [isFocused]);\n  return _jsx(PlacesList, {\n    places: loadedPlaces\n  });\n}\n\nexport default AllPlaces;","map":{"version":3,"sources":["C:/Users/jimpe/Desktop/react_native_apps/BarcelonaApp/Screens/AllPlaces.jsx"],"names":["useEffect","useState","useIsFocused","PlacesList","AllPlaces","route","loadedPlaces","setLoadedPlaces","isFocused","loadPlaces","fetchPlaces","places"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,YAAT,QAA6B,0BAA7B;;;;AAEA,OAAOC,UAAP;;;AAGA,SAASC,SAAT,OAA4B;AAAA,MAARC,KAAQ,QAARA,KAAQ;;AAC1B,kBAAwCJ,QAAQ,CAAC,EAAD,CAAhD;AAAA;AAAA,MAAOK,YAAP;AAAA,MAAqBC,eAArB;;AAEA,MAAMC,SAAS,GAAGN,YAAY,EAA9B;AAEAF,EAAAA,SAAS,CAAC,YAAM;AACd,aAAeS,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACuBC,WAAW,EADlC;;AAAA;AACQC,cAAAA,MADR;AAEEJ,cAAAA,eAAe,CAACI,MAAD,CAAf;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,QAAIH,SAAJ,EAAe;AACbC,MAAAA,UAAU;AAEX;AACF,GAVQ,EAUN,CAACD,SAAD,CAVM,CAAT;AAYA,SAAO,KAAC,UAAD;AAAY,IAAA,MAAM,EAAEF;AAApB,IAAP;AACD;;AAED,eAAeF,SAAf","sourcesContent":["import { useEffect, useState } from \"react\"\r\nimport { useIsFocused } from \"@react-navigation/native\"\r\nimport {StyleSheet, Text, View, } from 'react-native'\r\nimport PlacesList from \"../Components/Places/PlacesList\"\r\n\r\n\r\nfunction AllPlaces({route}) {\r\n  const [loadedPlaces, setLoadedPlaces] = useState([])\r\n\r\n  const isFocused = useIsFocused()\r\n\r\n  useEffect(() => {\r\n    async function loadPlaces() {\r\n      const places = await fetchPlaces();\r\n      setLoadedPlaces(places);\r\n    }\r\n\r\n    if (isFocused) {\r\n      loadPlaces();\r\n      // setLoadedPlaces((curPlaces) => [...curPlaces, route.params.place]);\r\n    }\r\n  }, [isFocused]);\r\n\r\n  return <PlacesList places={loadedPlaces} />;\r\n}\r\n\r\nexport default AllPlaces"]},"metadata":{},"sourceType":"module"}